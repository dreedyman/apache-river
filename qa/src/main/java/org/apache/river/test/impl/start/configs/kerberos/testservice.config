/* Configuration source file for SSL testservice */

/*
 * This service assumes fiddler's for now because no
 * general purpose pool of identities exists at this point
 */

import org.apache.river.phoenix.*;

import net.jini.jeri.*;
import net.jini.jeri.kerberos.KerberosServerEndpoint;
import net.jini.jeri.security.*;
import net.jini.constraint.*;
import net.jini.core.constraint.*;
import net.jini.jeri.*;
import net.jini.security.*;
import net.jini.export.ExportPermission;

import javax.security.auth.login.LoginContext;
import javax.security.auth.kerberos.KerberosPrincipal;

import java.security.Permission;
import java.util.Collections;

org.apache.river.testservice {

    /*
     * Kerberos login and principals
     */
    loginContext = new LoginContext("org.apache.river.Fiddler");

    /* Principals */
    static fiddler =
        new KerberosPrincipal("${fiddler}");
    private static phoenix =
        new KerberosPrincipal("${phoenix}");
    private static reggie =
        new KerberosPrincipal("${reggie}");
    static tester =
        new KerberosPrincipal("${test}");

    /*
     * Service exporter and client proxy preparers
     */
    exporter =
        new BasicJeriExporter(
	    KerberosServerEndpoint.getInstance(0),
	    new BasicILFactory(
		new BasicMethodConstraints(
		    new InvocationConstraints(
			new InvocationConstraint[]{
			    Integrity.YES
                            },
			null)),
		AccessPermission.class));


    listenerPreparer = new BasicProxyPreparer(
        true,
        new BasicMethodConstraints(new InvocationConstraints(
            new InvocationConstraint[]{
		Integrity.YES,
		ClientAuthentication.YES,
		ServerAuthentication.YES,
		new ServerMinPrincipal(tester)},
	    null)),
	new Permission[]{
	    new AuthenticationPermission(Collections.singleton(fiddler),
					 Collections.singleton(tester),
					 "connect")
	});

    /*
     * Values for talking to the lookup service - lots missing
     */
    private static reggieConstraints =
        new BasicMethodConstraints(
	    new InvocationConstraints(
		new InvocationConstraint[] {
		    Integrity.YES,
		    ServerAuthentication.YES,
		    new ServerMinPrincipal(reggie) },
		null));

    // also need registrar lease preparers, registration preparers, etc.

    /*
     * Values for talking to the activation system
     */
    private static activationSystemConstraints =
        new BasicMethodConstraints(
            new InvocationConstraints(
                new InvocationConstraint[] {
		    Integrity.YES,
		    ServerAuthentication.YES,
		    new ServerMinPrincipal(phoenix) },
		null));

    activationSystemPreparer =
        new BasicProxyPreparer(
            true,
	    activationSystemConstraints,
	    new Permission[]{
		new AuthenticationPermission(Collections.singleton(fiddler),
					     Collections.singleton(phoenix),
					     "connect")
        });
    activationIdPreparer =
        new BasicProxyPreparer(true, activationSystemConstraints, null);
}

/* the preparer that a test should use for fiddler's proxy */

preparer {
    proxyPreparer = 
	new BasicProxyPreparer(
	    true,
	    new BasicMethodConstraints(new InvocationConstraints(
                new InvocationConstraint[]{
		    Integrity.YES,
		    ServerAuthentication.YES,
		    new ServerMinPrincipal(org.apache.river.testservice.fiddler)},
		null)),
	    new Permission[]{
		new AuthenticationPermission(
		    Collections.singleton(org.apache.river.testservice.tester),
		    Collections.singleton(org.apache.river.testservice.fiddler),
		    "connect")
	 });
}


