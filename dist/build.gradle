/*
 * Copyright to the original author or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *         http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

description = 'Module :: River Distribution'
apply plugin: 'base'

configurations {
    distribution
    distribution.extendsFrom(runtime)
}

ext {
    distDir = "${project.buildDir.path}/river"
}

dependencies {
    distribution "org.codehaus.groovy:groovy:${groovyVersion}"
    distribution "com.boundary:high-scale-lib:${highscaleVersion}"
}

task createDistribution () {
    doLast {
        File riverLibDir = file("$distDir-${version}/lib/")
        File riverDlDir = file("$distDir-${version}/lib-dl")

        /* Copy over distribution dependencies */
        project.configurations['distribution'].files.each {dep ->
            copy {
                from dep
                into riverLibDir
            }
        }

        rootProject.subprojects {
            if (project.name != "dist") {
                project.tasks.withType(Jar).each {jar ->
                    String jarName = jar.archiveFileName.get()
                    File target = jarName.contains("-dl") ? riverDlDir : riverLibDir
                    if (jar.archiveFile.get().asFile.exists()) {
                        copy {
                            from jar.archiveFile
                            into target
                        }
                    }
                }
            }
        }

        copy {
            from("${project.rootProject.projectDir}") {
                include "LICENSE"
                include "NOTICE"
            }
            into "${distDir}-${version}"
        }
    }
}

task distribution(type: Zip, dependsOn: createDistribution) {
    doFirst {
        println "Zipping distribution river-${project.version} -> river-${project.version}.zip"
    }
    archiveFileName = "river-${project.version}.zip"
    destinationDirectory = project.buildDir
    from("${project.buildDir.path}/river-${project.version}")
    into "river-${project.version}"
    doLast {
        println "Complete"
    }
}

build.dependsOn distribution
check.dependsOn distribution